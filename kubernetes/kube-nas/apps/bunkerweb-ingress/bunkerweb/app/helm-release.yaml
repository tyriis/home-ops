---
# yaml-language-server: $schema=https://raw.githubusercontent.com/bjw-s/helm-charts/main/charts/other/app-template/schemas/helmrelease-helm-v2.schema.json
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: &app bunkerweb
spec:
  interval: 30m
  chart:
    spec:
      chart: app-template
      version: 3.3.2
      sourceRef:
        kind: HelmRepository
        name: bjw-s-charts
        namespace: flux-system
  install:
    remediation:
      retries: 3
  upgrade:
    cleanupOnFail: true
    remediation:
      strategy: rollback
      retries: 3
  values:
    serviceAccount:
      create: true
      name: *app
    controllers:
      bunkerweb-controller:
        replicas: 1
        strategy: Recreate
        containers:
          bunkerweb-controller:
            image:
              repository: bunkerity/bunkerweb-autoconf
              tag: 1.5.9@sha256:467d9468b060e42b30272bd928f6efa04e62f0aaa358e94ae5634e3b8d3a2f6b
            env:
              KUBERNETES_MODE: "yes"
              DATABASE_URI: "postgresql://bunkerweb:changeme@bunkerweb-bunkerweb-db:5432/db"
      bunkerweb:
        replicas: 2
        annotations:
          reloader.stakater.com/auto: "true"
          bunkerweb.io/AUTOCONF: "yes"
          bunkerweb.io/INSTANCE: "yes"
        containers:
          bunkerweb:
            securityContext:
              runAsUser: 101
              runAsGroup: 101
              allowPrivilegeEscalation: false
              # readOnlyRootFilesystem: true
              capabilities: { drop: ["ALL"] }
            ports:
              - containerPort: 8080
                protocol: TCP
                # hostPort: 80
              - containerPort: 8443
                # hostPort: 443
                protocol: TCP
            image:
              repository: bunkerity/bunkerweb
              tag: 1.5.9@sha256:93c067a639c9d06cffb545d9bf6a626e59b783b9273f138bad264891570c2ea6
            env:
              KUBERNETES_MODE: "yes"
              DNS_RESOLVER: kube-dns.kube-system.svc.cluster.local
              USE_API: "yes"
              API_WHITELIST_IP: "127.0.0.0/8 10.0.0.0/8"
              SERVER_NAME: ""
              MULTISITE: "yes"
              USE_UI: "yes"
              USE_REDIS: "yes"
              REDIS_HOST: dragonfly.database-system.svc.cluster.local
            probes:
              liveness: &probes
                enabled: true
                custom: true
                spec:
                  exec:
                    command:
                      - /usr/share/bunkerweb/helpers/healthcheck.sh
                  initialDelaySeconds: 30
                  periodSeconds: 1
                  timeoutSeconds: 1
                  failureThreshold: 3
              readiness: *probes
            # resources:
            #   requests:
            #     cpu: 100m
            #   limits:
            #     memory: 2Gi
      bunkerweb-scheduler:
        replicas: 1
        strategy: Recreate
        containers:
          bunkerweb-scheduler:
            image:
              repository: bunkerity/bunkerweb-scheduler
              tag: 1.5.9@sha256:f91442cc0dc0b41f3f7969ec9da14de16de0fcd94fb51cd344dba185bf1099c2
            env:
              KUBERNETES_MODE: "yes"
              DATABASE_URI: "postgresql://bunkerweb:changeme@bunkerweb-bunkerweb-db:5432/db"
      bunkerweb-db:
        replicas: 1
        strategy: Recreate
        containers:
          bunkerweb-db:
            image:
              repository: postgres
              tag: 13.16@sha256:d05d88eb10faff025041b70ab7fa33f752e38a9632c50448a435d4b233692bb0
            env:
              POSTGRES_DB: db
              POSTGRES_USER: bunkerweb
              POSTGRES_PASSWORD: changeme
              PGDATA: /var/lib/postgresql/data/pgdata
      bunkerweb-ui:
        replicas: 1
        strategy: Recreate
        containers:
          app:
            image:
              repository: bunkerity/bunkerweb-ui
              tag: 1.5.9@sha256:1d60d58e03b258b7b3f60d1b77c638766a83ae98c981da2ee9ecdf35261a332c
            env:
              ADMIN_USERNAME: "admin"
              ADMIN_PASSWORD: "Admin1234$"
              DATABASE_URI: "postgresql://bunkerweb:changeme@bunkerweb-bunkerweb-db:5432/db"
    # defaultPodOptions:
    #   securityContext:
    #     runAsNonRoot: true
    #     runAsUser: 101
    #     runAsGroup: 101
    #     fsGroup: 568
    #     fsGroupChangePolicy: OnRootMismatch
    #     supplementalGroups: [10000]
    #     seccompProfile: { type: RuntimeDefault }
    service:
      bunkerweb-db:
        controller: bunkerweb-db
        ports:
          sql:
            port: 5432
            protocol: TCP
      app:
        controller: bunkerweb-ui
        ports:
          http:
            port: 7000

    # serviceMonitor:
    #   app:
    #     serviceName: minio
    #     endpoints:
    #       - port: s3
    #         scheme: http
    #         path: /minio/v2/metrics/cluster
    #         interval: 1m
    #         scrapeTimeout: 10s
    ingress:
      app:
        annotations:
          cert-manager.io/cluster-issuer: letsencrypt-production
          kubernetes.io/tls-acme: "true"
          nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
          nginx.ingress.kubernetes.io/ssl-redirect: "true"
        className: nginx
        hosts:
          - host: &host "{{ .Release.Name }}.tyriis.dev"
            paths:
              - path: /
                service:
                  identifier: app
                  port: http
        tls:
          - hosts:
              - *host
            secretName: "{{ .Release.Name }}-tls"
    persistence:
      data:
        type: persistentVolumeClaim
        accessMode: ReadWriteOnce
        size: 5Gi
        storageClass: openebs-hostpath
        advancedMounts:
          bunkerweb-db:
            bunkerweb-db:
              - path: /var/lib/postgresql/data/pgdata
