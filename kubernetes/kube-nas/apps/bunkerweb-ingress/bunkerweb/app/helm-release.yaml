---
# yaml-language-server: $schema=https://raw.githubusercontent.com/bjw-s/helm-charts/main/charts/other/app-template/schemas/helmrelease-helm-v2.schema.json
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: &app bunkerweb
spec:
  interval: 30m
  driftDetection:
    mode: enabled
  timeout: 5m
  chart:
    spec:
      chart: app-template
      version: 4.2.0
      sourceRef:
        kind: HelmRepository
        name: bjw-s-charts
        namespace: flux-system
  install:
    remediation:
      retries: 3
  upgrade:
    cleanupOnFail: true
    remediation:
      strategy: rollback
      retries: 3
  uninstall:
    keepHistory: false
  values:
    serviceAccount:
      bunkerweb: {}
    controllers:
      controller:
        serviceAccount:
          identifier: bunkerweb
        replicas: 1
        strategy: Recreate
        containers:
          bunkerweb-controller:
            image:
              repository: bunkerity/bunkerweb-autoconf
              tag: 1.6.4@sha256:887d55a3dfb1594025e4c8ee5f7c3961461279fbfb41ac0ee71a2b50b0a3e051
            env:
              KUBERNETES_MODE: "yes"
              NAMESPACES: ""
            envFrom:
              - secretRef:
                  name: bunkerweb-database
      bunkerweb:
        forceRename: bunkerweb
        serviceAccount:
          identifier: bunkerweb
        replicas: 2
        annotations:
          reloader.stakater.com/auto: "true"
          bunkerweb.io/AUTOCONF: "yes"
          bunkerweb.io/INSTANCE: "yes"
        containers:
          bunkerweb:
            securityContext:
              runAsUser: 101
              runAsGroup: 101
              allowPrivilegeEscalation: false
              # readOnlyRootFilesystem: true
              capabilities: { drop: ["ALL"] }
            ports:
              - containerPort: 8080
                protocol: TCP
                # hostPort: 80
              - containerPort: 8443
                # hostPort: 443
                protocol: TCP
            image:
              repository: bunkerity/bunkerweb
              tag: 1.6.4@sha256:1caa361d5ed101b7feaa2631c67bc7c1a57faaf5ddcc6b5e08e9b4d27ebd89d5
            env:
              KUBERNETES_MODE: "yes"
              DNS_RESOLVER: kube-dns.kube-system.svc.cluster.local
              USE_API: "yes"
              API_WHITELIST_IP: "127.0.0.0/8 10.0.0.0/8"
              SERVER_NAME: ""
              MULTISITE: "yes"
              USE_UI: "yes"
              USE_REDIS: "yes"
              REDIS_HOST: dragonfly.dragonfly-system.svc.cluster.local
            probes:
              liveness: &probes
                enabled: true
                custom: true
                spec:
                  exec:
                    command:
                      - /usr/share/bunkerweb/helpers/healthcheck.sh
                  initialDelaySeconds: 30
                  periodSeconds: 1
                  timeoutSeconds: 1
                  failureThreshold: 3
              readiness: *probes
            # resources:
            #   requests:
            #     cpu: 100m
            #   limits:
            #     memory: 2Gi
      scheduler:
        serviceAccount:
          identifier: bunkerweb
        replicas: 1
        strategy: Recreate
        containers:
          bunkerweb-scheduler:
            image:
              repository: bunkerity/bunkerweb-scheduler
              tag: 1.6.4@sha256:b4cf1f0f7b731fe9d6446a98fd17b156d65272768b12b3d184011688bb2be4dc
            env:
              KUBERNETES_MODE: "yes"
              DNS_RESOLVER: kube-dns.kube-system.svc.cluster.local
              USE_API: "yes"
              API_WHITELIST_IP: "127.0.0.0/8 10.0.0.0/8"
              BUNKERWEB_INSTANCES: ""
              SERVER_NAME: ""
              MULTISITE: "yes"
              USE_UI: "yes"
              USE_REDIS: "yes"
              REDIS_HOST: dragonfly.dragonfly-system.svc.cluster.local
              USE_REAL_IP: "yes"
            envFrom:
              - secretRef:
                  name: bunkerweb-database
      bunkerweb-ui:
        replicas: 1
        strategy: Recreate
        containers:
          app:
            image:
              repository: bunkerity/bunkerweb-ui
              tag: 1.6.3@sha256:65b3f5a48fa7dfdda9d591f86979e7d6f0d50be93616155acaf2c0dddf2223a3
            env:
              ADMIN_USERNAME: "admin"
              ADMIN_PASSWORD: "Admin1234$"
            envFrom:
              - secretRef:
                  name: bunkerweb-database
    # defaultPodOptions:
    #   securityContext:
    #     runAsNonRoot: true
    #     runAsUser: 101
    #     runAsGroup: 101
    #     fsGroup: 568
    #     fsGroupChangePolicy: OnRootMismatch
    #     supplementalGroups: [10000]
    #     seccompProfile: { type: RuntimeDefault }
    service:
      app:
        controller: bunkerweb-ui
        forceRename: bunkerweb-ui
        ports:
          http:
            port: 7000
      proxy:
        controller: bunkerweb
        forceRename: bunkerweb-external
        ports:
          http:
            port: 8080
          https:
            port: 8443

    # serviceMonitor:
    #   app:
    #     serviceName: minio
    #     endpoints:
    #       - port: s3
    #         scheme: http
    #         path: /minio/v2/metrics/cluster
    #         interval: 1m
    #         scrapeTimeout: 10s
    ingress:
      app:
        annotations:
          cert-manager.io/cluster-issuer: letsencrypt-production
          kubernetes.io/tls-acme: "true"
          nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
          nginx.ingress.kubernetes.io/ssl-redirect: "true"
        className: nginx
        hosts:
          - host: &host "{{ .Release.Name }}.tyriis.dev"
            paths:
              - path: /
                service:
                  identifier: app
                  port: http
        tls:
          - hosts:
              - *host
            secretName: "{{ .Release.Name }}-tls"
