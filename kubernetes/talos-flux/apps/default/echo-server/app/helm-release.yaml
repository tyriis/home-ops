---
# yaml-language-server: $schema=https://raw.githubusercontent.com/bjw-s/helm-charts/main/charts/other/app-template/schemas/helmrelease-helm-v2.schema.json
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: echo-server
spec:
  interval: 15m
  chart:
    spec:
      chart: app-template
      version: 4.1.1
      sourceRef:
        kind: HelmRepository
        name: bjw-s-charts
        namespace: flux-system
  maxHistory: 15
  install:
    createNamespace: true
    remediation:
      retries: 3
  upgrade:
    cleanupOnFail: true
    remediation:
      retries: 3
  uninstall:
    keepHistory: false
  values:
    # https://github.com/bjw-s/helm-charts/tree/main/charts/other/app-template
    controllers:
      echo-server:
        replicas: 2
        strategy: RollingUpdate
        containers:
          app:
            image:
              repository: ghcr.io/mendhak/http-https-echo
              tag: 37@sha256:f55000d9196bd3c853d384af7315f509d21ffb85de315c26e9874033b9f83e15
            env:
              HTTP_PORT: &port 80
              LOG_WITHOUT_NEWLINE: true
              LOG_IGNORE_PATH: /healthz
              PROMETHEUS_ENABLED: true
            probes:
              liveness: &probes
                enabled: true
                custom: true
                spec:
                  httpGet:
                    path: /healthz
                    port: *port
                  initialDelaySeconds: 0
                  periodSeconds: 10
                  timeoutSeconds: 1
                  failureThreshold: 3
              readiness: *probes
            securityContext:
              allowPrivilegeEscalation: false
              readOnlyRootFilesystem: true
              capabilities: { drop: ["ALL"] }
            resources:
              requests:
                cpu: 10m
              limits:
                memory: 64Mi
    defaultPodOptions:
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        runAsGroup: 1000
    service:
      app:
        controller: echo-server
        ports:
          http:
            port: *port
    serviceMonitor:
      app:
        serviceName: echo-server
        endpoints:
          - port: http

    ingress:
      app:
        className: nginx
        annotations:
          cert-manager.io/cluster-issuer: letsencrypt-production
          kubernetes.io/tls-acme: "true"
          nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
          nginx.ingress.kubernetes.io/ssl-redirect: "true"
          nginx.ingress.kubernetes.io/auth-url: https://oauth2-proxy.techtales.io/oauth2/auth
          # nginx.ingress.kubernetes.io/auth-signin: "https://oauth2-proxy.techtales.io/oauth2/start?rd=$request_uri"
          # nginx.ingress.kubernetes.io/auth-signin: "https://oauth2-proxy.techtales.io/oauth2/start?rd=$escaped_request_uri"
          nginx.ingress.kubernetes.io/auth-signin: "https://oauth2-proxy.techtales.io/oauth2/sign_in"
          nginx.ingress.kubernetes.io/auth-response-headers: x-auth-request-user, x-auth-request-email
          external-dns.alpha.kubernetes.io/target: external.techtales.io
          external-dns/cloudflare: "true"
          gethomepage.dev/enabled: "true"
          gethomepage.dev/description: Simple HTTP Echo Server
          gethomepage.dev/group: Networking
          gethomepage.dev/icon: mdi-video-input-antenna
          gethomepage.dev/name: Echo Server
        hosts:
          - host: &host "{{ .Release.Name }}.techtales.io"
            paths:
              - path: /
                pathType: Prefix
                service:
                  identifier: app
                  port: http
        tls:
          - hosts:
              - *host
            secretName: "{{ .Release.Name }}-tls"
